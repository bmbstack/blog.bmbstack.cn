{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/jekyll/source/scss/jekyll.scss","path":"scss/jekyll.scss","modified":0},{"_id":"themes/jekyll/source/js/respond.min.js","path":"js/respond.min.js","modified":0},{"_id":"themes/jekyll/source/js/mathjax.js","path":"js/mathjax.js","modified":0},{"_id":"themes/jekyll/source/js/html5shiv.min.js","path":"js/html5shiv.min.js","modified":0},{"_id":"themes/jekyll/source/img/post-count-badge.svg","path":"img/post-count-badge.svg","modified":0},{"_id":"themes/jekyll/source/img/github.png","path":"img/github.png","modified":0},{"_id":"themes/jekyll/source/img/divider.png","path":"img/divider.png","modified":0},{"_id":"themes/jekyll/source/favicon.png","path":"favicon.png","modified":0},{"_id":"themes/jekyll/source/css/jekyll.css","path":"css/jekyll.css","modified":0}],"Cache":[{"_id":"themes/jekyll/README.md","shasum":"bb19bc0c8beffa42e98d4a5fe7a5702b3e352af3","modified":1453877083432},{"_id":"themes/jekyll/_config.yml","shasum":"391ed8cf565c90b53fbdb1335bee36c92fda7f10","modified":1453877083432},{"_id":"themes/jekyll/gulpfile.babel.js","shasum":"f0c69ef4d5b4d92a6d52b7cb2629f7396dc6692d","modified":1453877083432},{"_id":"themes/jekyll/languages/en.yaml","shasum":"a6402916ad06ff11197561be44935545aa85001c","modified":1453877083432},{"_id":"themes/jekyll/languages/zh-cn.yaml","shasum":"560f02809c687d4c66f1eda5fa0f2f7eda864698","modified":1453877083432},{"_id":"themes/jekyll/layout/_components/footer.jade","shasum":"8a9286bb6ea3e8320637da7c96d3397bc73fac0c","modified":1453877083432},{"_id":"themes/jekyll/layout/_components/head.jade","shasum":"dc10f2aba7bc1e7329b88acea704a9fe09e2fa37","modified":1453877083432},{"_id":"themes/jekyll/layout/_components/nav.jade","shasum":"4a509638e6aa5ac08fc45a7c74451a4667b9cadf","modified":1453877083432},{"_id":"themes/jekyll/layout/_components/pagination.jade","shasum":"408c343208076d328aa1b70cc1c0971f5ae69774","modified":1453877083432},{"_id":"themes/jekyll/layout/_components/project.jade","shasum":"f1d8bc08317683624e0fea157f890462cf16d6e8","modified":1453877083432},{"_id":"themes/jekyll/layout/_components/selfintro.jade","shasum":"c52b1e33893a3a4cc56f363b37209cae49a0b8aa","modified":1453877083432},{"_id":"themes/jekyll/layout/_mixin/post.jade","shasum":"399dae6ea0d860b70a3b31b8f8b2a865fb4e21fc","modified":1453877083432},{"_id":"themes/jekyll/layout/_partial/layout.jade","shasum":"0459d6c7de0e9ef95c1f7b8e2429dc878de51da7","modified":1453877083432},{"_id":"themes/jekyll/layout/_partial/scripts.jade","shasum":"f342933e25c7b0184c679e59a8b6d61f34e45788","modified":1453877083432},{"_id":"themes/jekyll/layout/_sidebar/post.jade","shasum":"72650b939c2295ce7ce85f58317cfca424ce8451","modified":1453877083432},{"_id":"themes/jekyll/layout/_sidebar/tag.jade","shasum":"8534a15868f1e464835c126312414f3a29be1381","modified":1453877083432},{"_id":"themes/jekyll/layout/_sidebar/toc.jade","shasum":"43c3817b0b45678bceec8bf109d2e114bf28b517","modified":1453877083432},{"_id":"themes/jekyll/layout/archive.jade","shasum":"177601fb009bd8119456710eb4713319ecb4d6ea","modified":1453877083432},{"_id":"themes/jekyll/layout/index.jade","shasum":"4840459d09574e4a2fc6d002fccf4ebc3f98b3f4","modified":1453877083432},{"_id":"themes/jekyll/layout/post.jade","shasum":"3138dcf57d0413031202e4108a3745d58ec34456","modified":1453877083432},{"_id":"themes/jekyll/package.json","shasum":"8c6a76af681ee4018a374605b2ecbfdf6fb9db4b","modified":1453877083432},{"_id":"themes/jekyll/source/css/jekyll.css","shasum":"8383da1e243a68b1763441253659955872af0f2f","modified":1453877083432},{"_id":"themes/jekyll/source/img/divider.png","shasum":"8cbb99f8852f4a1fe4854d89aa894288eb445942","modified":1453877083432},{"_id":"themes/jekyll/source/img/github.png","shasum":"986fdb3e604d8cf3843423ff4c55f68e720124fa","modified":1453877083432},{"_id":"themes/jekyll/source/img/post-count-badge.svg","shasum":"5b72df36b67e4bf69a68db793142593e4523b8f8","modified":1453877083432},{"_id":"themes/jekyll/source/js/html5shiv.min.js","shasum":"e790c26449c57de298923c686cb3434d1d461a1d","modified":1453877083432},{"_id":"themes/jekyll/source/js/mathjax.js","shasum":"e4e0943a63d370742c63419329576f739c698324","modified":1453877083432},{"_id":"themes/jekyll/source/js/respond.min.js","shasum":"b5aba40d65b0d6f85859db47f757ea971a0efd30","modified":1453877083432},{"_id":"themes/jekyll/source/scss/_partial/base.scss","shasum":"1d5a912cfb0a4f9fef6373d96817ec9b0327dae0","modified":1453877083432},{"_id":"themes/jekyll/source/scss/_partial/common.scss","shasum":"2941a15d681c81d9074c2bc4969e6862205a0509","modified":1453877083432},{"_id":"themes/jekyll/source/scss/_partial/components.scss","shasum":"fd2058c9f3518d21556f498dfabe3f99a50ae0dc","modified":1453877083432},{"_id":"themes/jekyll/source/scss/_partial/highlight.scss","shasum":"668b1b47f4a663b583f74a52aae9ef7afa9f29da","modified":1453877083432},{"_id":"themes/jekyll/source/scss/_partial/home.scss","shasum":"232fc7ec4635253aeba2f825b4a8f9cc4bde5edc","modified":1453877083432},{"_id":"themes/jekyll/source/scss/_partial/layout.scss","shasum":"7b1132bf230625f1d374de8abc1497d444d5b3b6","modified":1453877083432},{"_id":"themes/jekyll/source/scss/_partial/normalize.scss","shasum":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1453877083436},{"_id":"themes/jekyll/source/scss/jekyll.scss","shasum":"2116f88e19c167222187dc3912ae65f0e8544901","modified":1453877083436},{"_id":"themes/jekyll/source/favicon.png","shasum":"45f10e56ae4b33cdfe0b73ba5f833f3c32fa8cc3","modified":1453877083432},{"_id":"public/scss/jekyll.scss","modified":1453877205650,"shasum":"2116f88e19c167222187dc3912ae65f0e8544901"},{"_id":"public/js/respond.min.js","modified":1453877205656,"shasum":"b5aba40d65b0d6f85859db47f757ea971a0efd30"},{"_id":"public/js/mathjax.js","modified":1453877205660,"shasum":"e4e0943a63d370742c63419329576f739c698324"},{"_id":"public/js/html5shiv.min.js","modified":1453877205663,"shasum":"e790c26449c57de298923c686cb3434d1d461a1d"},{"_id":"public/img/post-count-badge.svg","modified":1453877205665,"shasum":"5b72df36b67e4bf69a68db793142593e4523b8f8"},{"_id":"public/img/github.png","modified":1453877205668,"shasum":"986fdb3e604d8cf3843423ff4c55f68e720124fa"},{"_id":"public/img/divider.png","modified":1453877205670,"shasum":"8cbb99f8852f4a1fe4854d89aa894288eb445942"},{"_id":"public/favicon.png","modified":1453877205678,"shasum":"45f10e56ae4b33cdfe0b73ba5f833f3c32fa8cc3"},{"_id":"public/css/jekyll.css","modified":1453877205684,"shasum":"8383da1e243a68b1763441253659955872af0f2f"},{"_id":"public/2016/01/27/hello-world/index.html","modified":1453877206126,"shasum":"a4daa43af270a13aab2c6e159c4ecf3f041b2cf4"},{"_id":"public/archives/index.html","modified":1453877240544,"shasum":"1d63d6ce233000b27ce1f166ea8a386b8b847359"},{"_id":"public/archives/2016/index.html","modified":1453877206458,"shasum":"b0dda93407744d9a2fadcc2b4285bb9de769dd00"},{"_id":"public/archives/2016/01/index.html","modified":1453877206572,"shasum":"b0dda93407744d9a2fadcc2b4285bb9de769dd00"},{"_id":"public/atom.xml","modified":1453877240784,"shasum":"b851b7950b5b36651e4b25e656b28c9bad493bae"},{"_id":"public/index.html","modified":1453877240922,"shasum":"eea7d0f736cfbb6af7330e4544f738be30a3bb92"},{"_id":"source/_posts/demo.md","shasum":"b236aa0ab34c2135b61e54dacd47ca3de1f2eb6a","modified":1453877083432},{"_id":"public/2015/10/21/demo/index.html","modified":1453877240325,"shasum":"0245860a5fa46cdbca29aa7780e609c18819a761"},{"_id":"public/archives/2015/index.html","modified":1453877240663,"shasum":"1d63d6ce233000b27ce1f166ea8a386b8b847359"},{"_id":"public/archives/2015/10/index.html","modified":1453877240780,"shasum":"1d63d6ce233000b27ce1f166ea8a386b8b847359"},{"_id":"public/tags/css/index.html","modified":1453877241048,"shasum":"54791bd4cb69af2810f8b5da60b07992efbae8bc"}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"辨析 Sass 中的 Map 和 List","date":"2015-10-21T02:34:12.000Z","_content":"\n如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。\n\n自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。\n\n那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 `package.json` 或者其他同类型的项目配置文件所控制，往往只需一条命令（`gem update sass`）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。\n\n<!-- more -->\n\n使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。\n\n## 测试表格\n\nVariable | Description\n--- | ---\n`site` | Sitewide information.\n`page` | Page specific information and custom variables set in front-matter.\n`config` | Site configuration\n`theme` | Theme configuration. Inherits from site configuration.\n`_` (single underscore) | [Lodash](http://lodash.com/) library\n`path` | Path of current page\n`url` | Full URL of current page\n`env` | Environment variables\n\n\n## 语法比较\n\n<div class=\"note\">\n    <h5>测试标题</h5>\n    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 `min-width`、`max-width`、`font-size` 和 `line-height` 四个样式。</p>\n</div>\n\n#### Map 语法\n\n下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。\n\n```sass\n$breakpoint-map: (\n    small: (\n        min-width: null,\n        max-width: 479px,\n        base-font: 16px,\n        vertical-rhythm: 1.3\n    ),\n    medium: (\n        min-width: 480px,\n        max-width: 959px,\n        base-font: 18px,\n        vertical-rhythm: 1.414\n    ),\n    large: (\n        min-width: 960px,\n        max-width: 1099px,\n        base-font: 18px,\n        vertical-rhythm: 1.5\n    ),\n    xlarge: (\n        min-width: 1100px,\n        max-width: null,\n        base-font: 21px,\n        vertical-rhythm: 1.618\n    )\n);\n```\n\n#### 多重列表语法\n\n下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 `nth()` 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, null, 21px, 1.618)\n);\n```\n\n## 遍历比较\n\n<div class=\"note info\">\n    <h5>测试标题</h5>\n    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p>\n</div>\n\n#### 遍历 Map\n\n我们可以使用如下的代码遍历 Map：\n\n```sass\n@each $label, $map in $breakpoint-map {}\n```\n\n这里的变量 `$label` 和 `$map` 会随着对 `$breakpoint-map` 的遍历被动态地赋值，`$label` 将会被赋值为 `$breakpoint-map` 的 Key，而 `$map` 会被赋值为 `$breakpoint-map` 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 `map-get()` 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。\n\n具体的做法就是使用 `@each` 遍历 Map，然后使用 `map-get()` 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：\n\n```sass\n@each $label, $map in $breakpoint-map {\n    $min-width: map-get($map, min-width);\n    $max-width: map-get($map, max-width);\n    $base-font: map-get($map, base-font);\n    $vertical-rhythm: map-get($map, vertical-rhythm);\n}\n```\n\n#### 遍历多重列表\n\n遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 `map-get()` 函数取特定值，直接遍历一遍即可获得特定值。\n\n因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 `map-get()`，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：\n\n```sass\n@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n}\n```\n\n## 慎用多重列表\n\n<div class=\"note warning\">\n    <h5>测试标题</h5>\n    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p>\n</div>\n\n#### 遗漏键值\n\n如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, 21px, 1.618)\n);\n\np {\n    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n        @if $min-width {\n            @include breakpoint( $min-width ) {\n                font-size: $base-font;\n                line-height: $vertical-rhythm;\n            }\n        } @else {\n            font-size: $base-font;\n            line-height: $vertical-rhythm;\n        }\n    }\n}\n```\n\n当我们尝试运行这段代码时，结果肯定是错误地，因为在 `$breakpoint-list` 的最后一行，`xlarge` 被赋值给了 `$label`，`1100px` 被赋值给了 `$min-width`，`21px` 被赋值给了 `$max-width`, `1.618` 被赋值给了 `$base-font`，最终导致 `$vertical-rhythm` 没有被赋值，结果就是 `font-size` 的属性值是错的，`line-height` 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。\n\n如果我们使用 Map 来代替这里的多重列表，那么使用 `map-get()` 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。\n\n#### 查找特定列表\n\n在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 `map-get()` 函数可以快速定位到特定子 Map：\n\n```sass\n$medium-map: map-get($maps, medium);\n```\n\n但如果要获取多种列表 `medium` 列表，麻烦可就大了：\n\n```sass\n@function get-list($label) {\n    @each $list in $breakpoint-list {\n        @if nth($list, 1) == $label {\n            @return $list;\n        }\n    }\n    @return null;\n}\n$medium-list: get-list(medium);\n```\n\n这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 `null`。这实际上就是手工实现了 `map-get()` 的逻辑。\n\n#### 缺少原生的 Map 函数\n\nSass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 `map-merge()` 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 `join()` 或 `append()` 来增加新列表，从而模拟出 `map-merge()` 的效果。\n\n另一个实用的 Map 函数就是 `map-has-key()`，对于依赖 `map-get()` 的自定义函数来说，`map-has-key()` 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。\n\n## 总结\n\n<div class=\"note unreleased\">\n    <h5>Test Title</h5>\n    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p>\n</div>\n\n虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。\n","source":"_posts/demo.md","raw":"title: 辨析 Sass 中的 Map 和 List\ndate: 2015-10-21 10:34:12\ntags:\n- css\n---\n\n如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。\n\n自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。\n\n那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 `package.json` 或者其他同类型的项目配置文件所控制，往往只需一条命令（`gem update sass`）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。\n\n<!-- more -->\n\n使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。\n\n## 测试表格\n\nVariable | Description\n--- | ---\n`site` | Sitewide information.\n`page` | Page specific information and custom variables set in front-matter.\n`config` | Site configuration\n`theme` | Theme configuration. Inherits from site configuration.\n`_` (single underscore) | [Lodash](http://lodash.com/) library\n`path` | Path of current page\n`url` | Full URL of current page\n`env` | Environment variables\n\n\n## 语法比较\n\n<div class=\"note\">\n    <h5>测试标题</h5>\n    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 `min-width`、`max-width`、`font-size` 和 `line-height` 四个样式。</p>\n</div>\n\n#### Map 语法\n\n下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。\n\n```sass\n$breakpoint-map: (\n    small: (\n        min-width: null,\n        max-width: 479px,\n        base-font: 16px,\n        vertical-rhythm: 1.3\n    ),\n    medium: (\n        min-width: 480px,\n        max-width: 959px,\n        base-font: 18px,\n        vertical-rhythm: 1.414\n    ),\n    large: (\n        min-width: 960px,\n        max-width: 1099px,\n        base-font: 18px,\n        vertical-rhythm: 1.5\n    ),\n    xlarge: (\n        min-width: 1100px,\n        max-width: null,\n        base-font: 21px,\n        vertical-rhythm: 1.618\n    )\n);\n```\n\n#### 多重列表语法\n\n下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 `nth()` 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, null, 21px, 1.618)\n);\n```\n\n## 遍历比较\n\n<div class=\"note info\">\n    <h5>测试标题</h5>\n    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p>\n</div>\n\n#### 遍历 Map\n\n我们可以使用如下的代码遍历 Map：\n\n```sass\n@each $label, $map in $breakpoint-map {}\n```\n\n这里的变量 `$label` 和 `$map` 会随着对 `$breakpoint-map` 的遍历被动态地赋值，`$label` 将会被赋值为 `$breakpoint-map` 的 Key，而 `$map` 会被赋值为 `$breakpoint-map` 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 `map-get()` 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。\n\n具体的做法就是使用 `@each` 遍历 Map，然后使用 `map-get()` 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：\n\n```sass\n@each $label, $map in $breakpoint-map {\n    $min-width: map-get($map, min-width);\n    $max-width: map-get($map, max-width);\n    $base-font: map-get($map, base-font);\n    $vertical-rhythm: map-get($map, vertical-rhythm);\n}\n```\n\n#### 遍历多重列表\n\n遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 `map-get()` 函数取特定值，直接遍历一遍即可获得特定值。\n\n因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 `map-get()`，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：\n\n```sass\n@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n}\n```\n\n## 慎用多重列表\n\n<div class=\"note warning\">\n    <h5>测试标题</h5>\n    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p>\n</div>\n\n#### 遗漏键值\n\n如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, 21px, 1.618)\n);\n\np {\n    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n        @if $min-width {\n            @include breakpoint( $min-width ) {\n                font-size: $base-font;\n                line-height: $vertical-rhythm;\n            }\n        } @else {\n            font-size: $base-font;\n            line-height: $vertical-rhythm;\n        }\n    }\n}\n```\n\n当我们尝试运行这段代码时，结果肯定是错误地，因为在 `$breakpoint-list` 的最后一行，`xlarge` 被赋值给了 `$label`，`1100px` 被赋值给了 `$min-width`，`21px` 被赋值给了 `$max-width`, `1.618` 被赋值给了 `$base-font`，最终导致 `$vertical-rhythm` 没有被赋值，结果就是 `font-size` 的属性值是错的，`line-height` 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。\n\n如果我们使用 Map 来代替这里的多重列表，那么使用 `map-get()` 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。\n\n#### 查找特定列表\n\n在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 `map-get()` 函数可以快速定位到特定子 Map：\n\n```sass\n$medium-map: map-get($maps, medium);\n```\n\n但如果要获取多种列表 `medium` 列表，麻烦可就大了：\n\n```sass\n@function get-list($label) {\n    @each $list in $breakpoint-list {\n        @if nth($list, 1) == $label {\n            @return $list;\n        }\n    }\n    @return null;\n}\n$medium-list: get-list(medium);\n```\n\n这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 `null`。这实际上就是手工实现了 `map-get()` 的逻辑。\n\n#### 缺少原生的 Map 函数\n\nSass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 `map-merge()` 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 `join()` 或 `append()` 来增加新列表，从而模拟出 `map-merge()` 的效果。\n\n另一个实用的 Map 函数就是 `map-has-key()`，对于依赖 `map-get()` 的自定义函数来说，`map-has-key()` 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。\n\n## 总结\n\n<div class=\"note unreleased\">\n    <h5>Test Title</h5>\n    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p>\n</div>\n\n虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。\n","slug":"demo","published":1,"updated":"2016-01-27T06:44:43.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cijwgyxne0000nrf1s2lm01t9"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cijwgyxne0000nrf1s2lm01t9","tag_id":"cijwgyxnn0001nrf1l95d93r3","_id":"cijwgyxnr0002nrf141kjhqsf"}],"Tag":[{"name":"css","_id":"cijwgyxnn0001nrf1l95d93r3"}]}}